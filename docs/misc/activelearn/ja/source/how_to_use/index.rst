.. _sec_basic_usage:

***************************
基本的な使用方法
***************************

.. highlight:: none

aenetのインストール
-----------------------

abICSでは、ニューラルネットワークモデルの構築のためにaenetを利用します。
aenetは http://ann.atomistic.net からダウンロードすることが可能です。
DocumentationのInstallationに従い、インストールを実施します。
なお、abICSでは、ニューラルネットワークの学習と評価にaenetの ``train.x`` と ``predict.x`` を使います。
``train.x`` についてはMPI並列版が利用可能ですが、 ``predict.x`` についてはMPIを使用しない実行ファイル(serial)を使用する必要があります。
そのため、makefilesの下にあるserial版もインストールするようにしてください。

GNU parallelのインストール(オプション)
-----------------------------------------
チュートリアルではGNU parallelを用いて、Quantum Espressoによる第一原理計算を並列実行します。
そこで、GNU parallelを最初にインストールします。
GNU parallelは https://www.gnu.org/software/parallel/ からダウンロードすることができます(Macの場合はhomebrewにより直接インストールすることも可能です)。
また、オンラインで無償で利用できるチュートリアルを本サイトで配布しています。
インストールは基本的には、ダウンロードして解凍したディレクトリ に移動した後、

::

  $ ./configure && make && make install

でインストールできます。詳細な設定は公式マニュアルを参考にしてください。

.. _Input file:

入力ファイルの準備
-----------------------

abICSによる能動学習の利用にあたっては、abICS、aenet、利用する第一原理ソルバーの
3つに対応する入力ファイルを準備する必要があります。

abICS制御ファイル (input.toml)
++++++++++++++++++++++++++++++++++++++++++++++++++++
計算対象とする格子構造の定義と、abICSによる能動学習のループ全体の制御、および
レプリカ交換モンテカルロ法に関するパラメータを設定します。
``st2abics`` ツールを使うことで、結晶構造ファイルから ``input.toml`` のひな形を自動で生成することができます。

::

  $ cd [example_dir]
  $ st2abics st2abics_MgAl2O4.toml MgAl2O4.vasp > input.toml


今回の例題では、このようにして生成した ``input.toml`` の中の
``[solver]`` セクションのpathをご自身の環境におけるaenetの ``predict.x`` のパスに設定し、
``[trainer]`` セクションの ``exe_command`` をaenetの ``generate.x`` 、 ``train.x`` 実行時のコマンドに
置き換えます。さらに、 ``[solver]`` と ``[trainer]`` で ``ignore_species = ["O"]`` と設定することで動作します。

ここでは、``input.toml`` のセクションごとの設定内容をもう少し詳しく解説します。例題をとりあえず
実行したい場合は、読み飛ばしても大丈夫です。

(i)  [replica]セクション
****************************************************
.. code-block:: toml

    [replica] 
    nreplicas = 15            
    nprocs_per_replica = 1    
    kTstart = 600.0           
    kTend = 2000.0            
    nsteps = 6400 
    RXtrial_frequency = 4
    sample_frequency = 16
    print_frequency = 1
    reload = false

レプリカ交換モンテカルロ(RXMC)法のレプリカの数や温度範囲などに関する設定を行います（マニュアル参照リンク）。
今回は、RXMC計算のエネルギーソルバーとしてaenetの ``predict.x`` を用います。
現状、mpi版の ``predict.x`` はサポートしていないため、 ``nprocs_per_replica`` は
1を指定してください。

(ii)  [replicaRef]セクション
****************************************************
.. code-block:: toml

    [replicaRef] 
    nreplicas = 15
    nprocs_per_replica = 1
    nsteps = 400
    sample_frequency = 20

RXMC計算の結果から、ニューラルネットワークモデルの精度評価と訓練データの拡張のために原子配置を取り出す際の
オプションが設定できます。基本的に、 ``nreplicas`` や ``nprocs_per_replica`` は ``[replica]`` セクションと同じ値にしてください。
``nsteps`` は、RXMC計算で出力される配置の数（ ``[replica]`` セクションの ``nsteps/sample_frequency`` の値）のうち、
最初の何ステップまでを取り出すかを指定します。従って、RXMC計算で出力される配置の数以下の値に設定してください。
より小さい値に設定することで、RXMC計算の初期の部分を重点的に取ってくることができます（RXMC計算が平衡化しきる前
を重点的に抜き出したい場合など）。
また、 ``[replicaRef]`` セクションの ``sample_frequency`` は、配置を抜き出してくる間隔を指定します。
上記の場合は、20ステップ間隔でstep 0, 20, 40, ... 380の20通りの構造が1つのレプリカごとに抜き出されます。
全部で20×15=300通りの配置に対する第一原理計算の入力ファイルが生成されることになります。

(iii)  [solver]セクション
****************************************************
.. code-block:: toml

    [solver] # RXMC計算に使うソルバーの設定
    type = 'aenet'
    path= '~/git/aenet/bin/predict.x-2.0.4-ifort_serial'
    base_input_dir = './baseinput'
    perturb = 0.0
    run_scheme = 'subprocess' 
    ignore_species = ["O"]

RXMC計算に使うエネルギーソルバーの設定を行います。今回は、aenetを使ってニューラルネットワークモデルの評価を行います。
``type`` , ``perturb`` , ``run_scheme`` に関しては、能動学習スキームを用いる場合は上の例のまま変更しないでください。
``path`` には、ご自身の環境におけるaenetの ``predict.x`` のパスを指定してください。 ``base_input_dir`` 
は自由に設定して構いません。
設定したディレクトリの中に ``predict.x`` に対応した入力ファイルが自動で設置されます（後述）。

また、 ``ignore_species`` では、
ニューラルネットワークモデルで「無視」する原子種を指定できます。今回の例題では、Oの副格子は常に占有率1なので、Oの
配置はエネルギーに影響を及ぼしません。こういった場合は、ニューラルネットワークモデルの訓練および評価時に存在を無視した方が、
計算効率が高くなります。

(iv)  [solverRef]セクション
****************************************************
.. code-block:: toml

    [solverRef] # 参照第一原理ソルバーの設定
    type = 'qe'
    path = '' # active learning では無視される
    base_input_dir = ['./baseinput_ref', './baseinput_ref', './baseinput_ref'] #, './baseinput_ref']
    perturb = 0.05
    ignore_species = []

訓練データ（配置エネルギー）の計算に用いるソルバーの設定を行います。この例ではQuantum Espressoで配置エネルギーを求めます。
``base_input_dir`` は自由に設定して構いません。設定したディレクトリの中に、ソルバーの入力ファイルを設置します（後述）。
この例のように、リスト形式で複数設定した場合は、各々の入力を使った計算が順番に実行されます。このときに、2番目以降の計算では
前の計算の最終ステップでの構造が初期座標として用いられます。そして、最後の計算のエネルギーが
学習に使われます。例えば、1つ目の入力ファイルでで精度を犠牲にして高速な構造最適化を行い、2番目以降の入力ファイルで
高精度な設定で構造最適化を行うといった
ことが可能になります。あるいは、格子ベクトルの緩和を行う場合に、設定した平面波カットオフに基づいて計算メッシュをリセット
するために同じ入力の計算を複数回実行するといったことも可能です。

``perturb`` は、ランダムに各原子を変位させることで、対称性を崩した構造から構造最適化を開始するための
設定です。この場合は、構造緩和を行う原子を全て0.05 Å、ランダムな方向に変位させた構造から1番目の計算が開始されます。

また、 ``ignore_species`` は、第一原理ソルバーを訓練データ生成に用いる場合は空リストを指定しますが、一部の元素を無視するような
モデルを使って訓練データを生成する場合は、無視する元素を指定します。



(v)  [trainer]セクション
****************************************************
.. code-block:: toml

    [trainer] # モデル学習器の設定
    type = 'aenet'
    base_input_dir = './aenet_train_input'
    exe_command = ['~/git/aenet/bin/generate.x-2.0.4-ifort_serial', 
                  'srun ~/git/aenet/bin/train.x-2.0.4-ifort_intelmpi']
    ignore_species = ["O"]
    vac_map = []
    restart = false

訓練データから配置エネルギー予測モデルを学習する学習器の設定を行います。現在のところ、abICSではaenetのみに
対応しています。 ``base_input_dir`` は自由に設定して構いません。設定したディレクトリの中に、学習器の設定ファイルを
設置します（後述）。 ``exe_command`` にはaenetの ``generate.x`` と ``train.x`` へのパスを指定します。
``train.x`` についてはMPI並列版が利用可能で、その場合は、上の例で示すように、MPI実行するためのコマンド
（ ``srun`` 、 ``mpirun`` など）を合わせて設定してください。

また、 ``ignore_species`` は、第一原理ソルバーを訓練データ生成に用いる場合は空リストを指定しますが、
一部の元素を無視するような
モデルを使って訓練データを生成する場合は、無視する元素を指定します。 ``vac_map`` 、 ``restart`` については現状対応していないので、
例のように設定してください。

(vi)  [config]セクション
****************************************************
.. code-block:: toml

    [config] # 以下、結晶格子の情報と、格子上に配置される原子や空孔の情報が続く
    unitcell = [[8.1135997772, 0.0000000000, 0.0000000000],
                [0.0000000000, 8.1135997772, 0.0000000000],
                [0.0000000000, 0.0000000000, 8.1135997772]]
    supercell = [1,1,1]

    [[config.base_structure]]
    type = "O"
    coords = [
        [0.237399980, 0.237399980, 0.237399980],
        [0.762599945, 0.762599945, 0.762599945],
        [0.512599945, 0.012600004, 0.737399936],
        [0.487399966, 0.987399936, 0.262599975],
        ... 

モンテカルロサンプリングを行う原子配置の情報を設定します。基本的に ``st2abics`` ツールで生成されたものを
そのまま利用できます。

第一原理ソルバーの入力ファイル
++++++++++++++++++++++++++++++++++++++++++++++++++++

使用する第一原理ソルバーにしたがって入力(参照)ファイルを用意します。
以下、各ソルバーで必要な参照ファイルを記載します。

VASP
****

- URL : https://www.vasp.at

- 参照ファイル

  - INCAR, POTCAR, KPOINTS ファイルを用意してください。

    - POTCARファイルは元素をアルファベット順に並べてください。
    - POSCARファイルは不要ですが、依存パッケージである ``pymatgen`` のバージョンによっては必要になります。その場合、なにか適当なファイルを用意してください。

Quantum Espresso
****************

- URL : https://www.quantum-espresso.org

- バージョンは 6.2 以上を利用してください。

  - いわゆる旧形式 XML バージョンは利用できません。

- 参照ファイル

  - 参照ファイル名は ``scf.in`` にしてください。
  - ``calculation`` は ``scf`` と ``relax`` のみ対応しています。
  - :math:`\Gamma` 点のみで計算する場合には、 ``kpoints`` を ``Gamma`` に指定すると高速化します。

OpenMX
******

- URL : http://www.openmx-square.org

- バージョンは 3.9 を利用してください。

- 参照ファイル

  - 参照ファイル名は ``base.dat`` にしてください。


aenetを使った訓練および配置エネルギ－計算用の入力ファイル
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

aenet用の入力ファイルを ``[trainer]`` セクションの ``base_input_dir`` で
設定したディレクトリ内の ``generate`` 、 ``train`` 、および ``predict``
ディレクトリに設置します。

generate
********

aenetでは、訓練用の原子配置とエネルギーのデータを、原子環境記述子とエネルギーの
関係に変換した中間バイナリフォーマットにまとめてから訓練を行います。この変換を
行う ``generate.x`` 用の
入力ファイルを ``generate`` ディレクトリに設置します。

まず、元素種ごとの
記述子設定ファイルを用意します。ファイル名は任意ですが、チュートリアルでは
``Al.fingerprint.stp`` , ``Mg.fingerprint.stp`` のような名前にしています。
例として ``Al.fingerprint.stp`` の内容を示します：

.. code-block ::

  DESCR
   N. Artrith and A. Urban, Comput. Mater. Sci. 114 (2016) 135-150.
   N. Artrith, A. Urban, and G. Ceder, Phys. Rev. B 96 (2017) 014112.
  END DESCR

  ATOM Al # 元素を指定

  ENV 2 # ATOMで指定した元素と相互作用する元素種の数と元素名を指定
  Al
  Mg

  RMIN 0.55d0 # 原子間の最隣接距離

  BASIS type=Chebyshev # チェビシェフ記述子の設定
  radial_Rc = 8.0  radial_N = 16 angular_Rc = 6.5  angular_N = 4

記述子設定の詳細についてはaenetのドキュメントをご参照ください。

次に、
``generate.in.head`` という名前の以下のようなファイルを準備します：

.. code-block ::

    OUTPUT aenet.train

    TYPES
    2
    Al -0.0  ! eV
    Mg -0.0  ! eV

    SETUPS
    Al   Al.fingerprint.stp
    Mg    Mg.fingerprint.stp


``OUTPUT`` には必ず ``aenet.train`` を指定してください。
``TYPES`` 以下には訓練データ中の元素種とその数を指定します。
元素種ごとにエネルギーの基準を指定することもできますが、基本的には
0に設定しておくのが無難です。
``SETUPS`` 以下には元素種ごとの記述子設定ファイルを指定します。
ファイルの末尾には必ず改行が入っていることを確認してください。
abICSは ``generate.in.head`` の末尾に座標ファイルのリストを
追加して、 ``generate.in`` を生成し、 ``generate.x`` を実行します。

train
*****

``generate`` で生成された訓練データを読み込み、訓練を行う
``train.x`` 用の入力ファイルを ``train`` ディレクトリに設置します。
ファイル名は ``train.in`` としてください：

.. code-block ::

    TRAININGSET aenet.train 
    TESTPERCENT 10
    ITERATIONS  500

    MAXENERGY 10000

    TIMING

    !SAVE_ENERGIES

    METHOD
    bfgs

    NETWORKS
    ! atom   network         hidden
    ! types  file-name       layers  nodes:activation
      Al     Al.15t-15t.nn    2      15:tanh 15:tanh
      Mg       Mg.15t-15t.nn    2      15:tanh 15:tanh

基本的には、 ``NETWORKS`` セクション以外は変更の必要はありません。
``NETWORKS`` セクションでは、生成する元素種ごとのポテンシャル
ファイル名と、ニューラルネットワーク構造、および活性化関数を指定します。

predict
*******

訓練したポテンシャルモデルを使って入力座標に対してエネルギーを
評価するための ``predict.x`` 用の入力ファイル ``predict.in`` を、 ``predict``
ディレクトリに設置します：

.. code-block ::

    TYPES
    2
    Mg
    Al

    NETWORKS
    Mg  Mg.15t-15t.nn
    Al  Al.15t-15t.nn

    VERBOSITY low

``TYPES`` セクションには元素種の数と元素名を、 ``NETWORKS``
セクションには元素種ごとのポテンシャルファイル名（ ``train.in`` で
設定したもの）を入力してください。

また、 ``VERBOSITY`` は必ず ``low`` に設定してください。

能動学習の実施
-----------------------

.. _初期訓練データの生成:

訓練データの生成
++++++++++++++++++++++++++++++++++++++++++++++++++++

(i)  第一原理計算用入力ファイルの生成
****************************************************

``abics_activelearn`` を用いて、``[solverRef]`` および ``[config]`` 
セクションの設定をもとに、訓練データの大元となる第一原理計算用の入力ファイルを生成します。
``abics_activelearn`` はMPI並列化されており、 ``[replicaRef]`` セクションで設定した
``nreplicas`` の並列数で実行します。 ``mpirun`` を用いる場合は、
::

  $ mpirun -n 8 abics_activelearn input.toml

のように実行します。
初回実行時は、 ``[replicaRef]`` で指定した数だけ原子配置をランダムに生成します。
そして、それぞれの原子配置ごとに ``AL0`` というディレクトリの中に個別に
ディレクトリを用意したうえで、第一原理計算用の入力ファイルを作成し、設置します。
同時に、それらのディレクトリのpathが記載されたファイル ``rundirs.txt`` も生成します。
このディレクトリリストを使って、個々の入力に対する第一原理計算ジョブの実行を自動化することができます。
実行方法は計算機システムに依存しますが、次節のチュートリアルでは、
スケジューラとしてslurmがインストールされている共用計算機を念頭に、
gnu parallelを利用した一括実行方法を紹介します。

なお、 ``abics_activelearn`` は、 ``[solverRef]`` セクションの 
``baseinput_dir`` で設定した
入力ファイルを利用し、第一原理ソルバー用入力ファイルの生成を行います。
同時に中間ファイル ``baseinput.progress`` を ``AL0`` ディレクトリ内に
出力し、 ``abics_activelearn`` を実行した回数を記録します。
``baseinput_dir`` に複数のディレクトリを指定した場合は、
``baseinput.progress`` の数字を読み込み、 対応する
入力ディレクトリに格納された入力ファイルを利用します。
実行回数が ``baseinput_dir`` に指定したディレクトリの数
よりも多い場合には、エラーメッセージを出力して終了します。

(ii)  第一原理計算の実行
****************************************************

(i)で作成した入力ファイルをもとに第一原理計算を実行します。

``baseinput_dir`` で複数の入力ディレクトリを指定した場合は、
``abics_activelearn`` の実行と(ii)の計算を回数分実行する必要があります。

最後にもう1度 ``abics_activelearn`` を実行して、使用した第一原理計算ソルバーに
依存しない共通フォーマットの構造ファイルとエネルギーのリストを生成します。

aenetを用いたニューラルネットワークモデルの作成
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

``abics_train`` スクリプトを使って、第一原理計算の計算結果をaenetを用いて学習し、配置エネルギー計算用の
ニューラルネットワークモデルを作成します。
::

  $ abics_train input.toml

``abics_train`` 自体は並列化されていませんが、サブプロセスとして実行するaenetの ``train.x`` は並列版が
利用可能です。``abics_train`` の設定は ``[trainer]`` セクションで記載します。


aenetをソルバーとして利用したモンテカルロサンプリング
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

``abicsAL`` スクリプトを実行し、レプリカ交換モンテカルロ法による原子配置サンプリングを行います。
::

  $ mpirun -n 8 abicsAL input.toml

能動学習ステップの番号に対応するMC0, MC1などのディレクトリを自動作成し、その中に
レプリカごとにサンプリングされた配置とエネルギーを格納します。

モンテカルロ計算から抽出した配置に対する能動学習
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

モンテカルロサンプリングを実行済みの状態で``abics_activelearn`` スクリプトを実行すると、
モンテカルロ計算で出現した配置からサンプリングを行い、能動学習のサイクルに対応する
``AL1, AL2, ...`` ディレクトリ内に第一原理計算の入力ファイルを生成します。あとは、
`初期訓練データの生成`_ 以降と同様の方法で、第一原理計算を実行し、学習データの拡充、
モデルの再学習およびモデルを使ったサンプリングを繰り返すことで、
配置エネルギー予測モデルの高精度化を図ります。
